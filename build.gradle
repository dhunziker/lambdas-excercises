apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Java 8 Lambdas: Pragmatic Functional Programming', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
	mavenLocal()
}

// Workaround for https://github.com/melix/jmh-gradle-plugin/issues/6
configurations {
	jmh
}

sourceSets {
	jmh
}

project.sourceSets.jmh {
	compileClasspath += project.configurations.jmh + project.sourceSets.main.output
	runtimeClasspath += project.configurations.jmh + project.sourceSets.main.output
}

dependencies {
	testCompile (
		[group: 'junit', name: 'junit', version: '4.11'],
		[group: 'com.insightfullogic', name: 'lambda-behave', version: '0.3']
	)
	compile (
		[group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.6'],
		[group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.6']
	)
	jmh (
		[project.configurations.compile]
	)
}

task jmhJar(type: Jar, dependsOn: jmhClasses) {
  doFirst {
    from (project.configurations.jmh.collect {it.isDirectory() ? it : project.zipTree(it)}) {
      exclude '**/META-INF/services/**'
      exclude '**/META-INF/*.SF'
      exclude '**/META-INF/*.DSA'
      exclude '**/META-INF/*.RSA'
    }
    from project.sourceSets.jmh.output
    from project.sourceSets.main.output
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  }

  manifest {
    attributes 'Main-Class':'org.openjdk.jmh.Main'
  }

  classifier = 'jmh'
}

task jmh(type: JavaExec, dependsOn: jmhJar) {
  main = 'org.openjdk.jmh.Main'
  classpath = project.files(project.jmhJar.archivePath) + project.sourceSets.main.runtimeClasspath
  args = ["-wi", "10", "-i", "10", "-f", "1", "-v", "EXTRA"]
}
